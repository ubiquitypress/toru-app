package java_ojs;

import javax.swing.*;
import javax.swing.UIManager.LookAndFeelInfo;

import java.awt.event.ActionListener;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.sql.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.awt.event.ActionEvent;
import java.awt.Font;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Button;
import java.awt.event.FocusAdapter;
import java.awt.event.FocusEvent;
import java.awt.event.KeyEvent;
import java.awt.BorderLayout;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.BevelBorder;
import javax.swing.table.DefaultTableModel;

import models.Issue;

import javax.swing.JOptionPane;
import java.awt.Label;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.Panel;

public class Main {
	JFrame login, api, issues, articles, settings;
	private JTextField access_key, api_url, username;
	private JTable issues_table;
	private int delay = 1000; // milliseconds
	private static String source_api = "";
	private static String source_access_key = "";
	private JPasswordField passwordField;
	private static HashMap<String, Boolean> list_settings;
	private static ArrayList<String> setting_keys = new ArrayList<String>();
	private static Connection c = null;
	private static Statement stmt = null;
	private String api_insert_or_replace_statement = "INSERT OR REPLACE INTO API(URL,ACCESS_KEY) VALUES (?,?)";
	private String settings_insert_or_replace_statement = "INSERT OR REPLACE INTO SETTING(NAME,VALUE) VALUES (?,?)";
	private int width = 960;
	private int height = 720;

	/*
	 * Initial setup test
	 */
	public void database_save() {
		System.out.println("Saving database...");

		try {
			if (c != null && c.isClosed()) {
				c = DriverManager.getConnection("jdbc:sqlite:local_datatabse.db");
				stmt = c.createStatement();
			}
			PreparedStatement prep = c.prepareStatement(api_insert_or_replace_statement);
			prep.setString(1, source_api);
			prep.setString(2, source_access_key);
			prep.executeUpdate();
			for (int i = 0; i < list_settings.size(); i++) {
				PreparedStatement setting_prep = c.prepareStatement(settings_insert_or_replace_statement);
				setting_prep.setString(1, setting_keys.get(i));
				setting_prep.setBoolean(2, list_settings.get(setting_keys.get(i)));
				setting_prep.executeUpdate();
			}
			stmt.close();
			c.close();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out.println("Done.");
	}

	public static void populate_variables() {
		System.out.println("Retrieving data from local database");
		list_settings = new HashMap<String, Boolean>();
		try {
			ResultSet rs = stmt.executeQuery("SELECT * FROM API WHERE URL=" + "'api'" + ";");
			while (rs.next()) {
				source_api = rs.getString("url");
				source_access_key = rs.getString("access_key");
				System.out.println("URL: " + source_api);
				System.out.println("ACCESS KEY: " + source_access_key);
			}
			rs.close();
			rs = stmt.executeQuery("SELECT * FROM SETTING ;");
			while (rs.next()) {
				String name = rs.getString("name");
				Boolean value = rs.getBoolean("value");
				list_settings.put(name, value);
				setting_keys.add(name);
				System.out.println("Setting - " + name + " : " + value.toString());
			}
			rs.close();

		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out.println("Done.");
	}

	public static void database_setup() {

		try {
			Class.forName("org.sqlite.JDBC");
			c = DriverManager.getConnection("jdbc:sqlite:local_datatabse.db");
			stmt = c.createStatement();
			String sql = "CREATE TABLE IF NOT EXISTS SETTING" + "(NAME CHAR(100) PRIMARY KEY NOT NULL,"
					+ " VALUE BOOLEAN DEFAULT FALSE)";
			stmt.executeUpdate(sql);
			sql = "CREATE TABLE IF NOT EXISTS API" + "(URL CHAR(250) PRIMARY KEY NOT NULL,"
					+ " ACCESS_KEY CHAR(100) NOT NULL)";
			stmt.executeUpdate(sql);
		} catch (Exception e) {
			System.err.println(e.getClass().getName() + ": " + e.getMessage());
			System.exit(0);
		}
		System.out.println("Opened database successfully");
	}

	public void login() {
		int width_small = 0;
		int height_small = 0;
		if (width >= 640) {
			width_small = (int) (960 - (960 * (37.5 / 100)));
		} else {
			width_small = (int) (640 - (640 * (37.5 / 100)));
		}
		height_small = (int) (480 - (480 * (5 / 100)));

		login = new JFrame();
		login.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				// database_save();
			}
		});
		login.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		login.getContentPane().setForeground(Color.WHITE);
		login.getContentPane().setBackground(new Color(128, 128, 128));

		login.setSize(width_small, height_small);// 400 width and 500 height
		login.getContentPane().setLayout(null);// using no layout managers
		JLabel lblNewLabel = new JLabel("TORU");

		lblNewLabel.setForeground(new Color(255, 250, 250));
		lblNewLabel.setBackground(new Color(230, 230, 250));
		lblNewLabel.setFont(new Font("Trattatello", Font.BOLD, 24));
		lblNewLabel.setToolTipText("Welcome\n");
		lblNewLabel.setBounds((width_small / 2) - 34, 15, 70, 25);
		login.getContentPane().add(lblNewLabel);
		username = new JTextField();
		username.setBounds(80, 220, width_small - 161, 26);
		login.getContentPane().add(username);
		username.setColumns(10);
		JLabel lblUsername = new JLabel("Username");
		lblUsername.setForeground(new Color(245, 255, 250));
		lblUsername.setHorizontalAlignment(SwingConstants.CENTER);
		lblUsername.setBounds(80, 200, width_small - 161, 16);
		login.getContentPane().add(lblUsername);
		JPanel title_background = new JPanel();
		title_background.setBackground(new Color(0, 0, 0));
		title_background.setBounds(-17, 0, width - 67, 54);
		login.getContentPane().add(title_background);
		JLabel lblPassword = new JLabel("Password");
		lblPassword.setHorizontalAlignment(SwingConstants.CENTER);
		lblPassword.setForeground(new Color(245, 255, 250));
		lblPassword.setBounds(80, 260, width_small - 161, 16);
		login.getContentPane().add(lblPassword);
		passwordField = new JPasswordField();
		passwordField.setBounds(80, 280, width_small - 161, 26);
		login.getContentPane().add(passwordField);
		JButton btnLogin = new JButton("Login");
		Action actionSubmit = new AbstractAction() {
			/**
			 * 
			 */
			private static final long serialVersionUID = 1L;

			@Override
			public void actionPerformed(ActionEvent e) {
				String user = username.getText();
				String pass = String.valueOf(passwordField.getPassword());
				if (pass.compareTo("root") == 0 && user.compareTo("user") == 0) {
					login.setVisible(false);
					login.dispose();
					if (source_api.compareTo("") == 0 && source_access_key.compareTo("") == 0) {
						api(false);
					} else {
						dashboard();
					}
				} else {
					JOptionPane.showMessageDialog(null, "Wrong username or password");
				}
			}
		};
		username.addActionListener(actionSubmit);
		passwordField.addActionListener(actionSubmit);
		btnLogin.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String user = username.getText();
				String pass = String.valueOf(passwordField.getPassword());
				if (pass.compareTo("root") == 0 && user.compareTo("user") == 0) {
					login.setVisible(false);
					if (source_api.compareTo("") == 0 && source_access_key.compareTo("") == 0) {
						api(false);
					} else {
						dashboard();
					}

				} else {
					JOptionPane.showMessageDialog(null, "Wrong username or password");
				}

			}
		});

		btnLogin.setBounds(width_small/3, 340, width_small/3, 29);
		login.getContentPane().add(btnLogin);

		final JButton btnSync1 = new JButton("Sync");
		btnSync1.setBounds(width_small - 155, 68, 70, 25);
		login.getContentPane().add(btnSync1);

		JLabel lblLogIn = new JLabel("Log in");
		lblLogIn.setForeground(new Color(224, 255, 255));
		lblLogIn.setFont(new Font("URW Gothic L", Font.BOLD, 24));
		lblLogIn.setHorizontalAlignment(SwingConstants.CENTER);
		lblLogIn.setBounds((width_small / 2) - 40, 150, 80, 30);
		login.getContentPane().add(lblLogIn);

		final Label internetCheck = new Label("   ONLINE");
		internetCheck.setFont(new Font("Dialog", Font.BOLD | Font.ITALIC, 12));
		internetCheck.setBackground(Color.GREEN);
		internetCheck.setForeground(new Color(255, 255, 255));
		internetCheck.setAlignment(1);
		internetCheck.setBounds(width_small - 85, 70, 65, 22);
		login.getContentPane().add(internetCheck);

		Panel panel = new Panel();
		panel.setBackground(new Color(204, 51, 51));
		panel.setBounds(0, 54, width_small, 5);
		login.getContentPane().add(panel);

		ActionListener taskPerformer1 = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				try {
					Socket sock = new Socket();
					InetSocketAddress addr = new InetSocketAddress("www.google.com", 80);
					sock.setSoTimeout(500);
					sock.connect(addr, 3000);
					sock.close();
					internetCheck.setBackground(Color.GREEN);
					internetCheck.setText("ONLINE");
					btnSync1.setEnabled(true);

				} catch (Exception e) {
					internetCheck.setBackground(Color.RED);
					internetCheck.setText("OFFLINE");
					btnSync1.setEnabled(false);
				}
			}
		};
		new Timer(delay, taskPerformer1).start();
		login.setVisible(true);// making the frame visible
	}

	public void settings() {
		int width_small = (int) (width - (width * (37.5 / 100)));
		int height_small = (int) (height - (height * (5 / 100)));
		settings = new JFrame();
		settings.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		settings.getContentPane().setBackground(new Color(128, 128, 128));
		settings.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				// database_save();
			}
		});
		settings.setSize(width_small, height_small);// 400 width and 500 height
		settings.getContentPane().setLayout(null);
		JLabel lblNewLabel = new JLabel("TORU");
		lblNewLabel.setForeground(new Color(255, 250, 250));
		lblNewLabel.setBackground(new Color(230, 230, 250));
		lblNewLabel.setFont(new Font("Trattatello", Font.BOLD, 24));
		lblNewLabel.setToolTipText("Welcome\n");

		lblNewLabel.setBounds((width_small / 2) - 34, 15, 70, 25);
		settings.getContentPane().add(lblNewLabel);
		JPanel title_background = new JPanel();
		title_background.setBackground(new Color(0, 0, 0));
		title_background.setBounds(-17, 0, width_small + 33, 54);
		settings.getContentPane().add(title_background);
		final JButton btnSync1 = new JButton("Sync");
		btnSync1.setBounds(width_small - 155, 68, 70, 25);
		settings.getContentPane().add(btnSync1);

		JLabel lblSettings = new JLabel("Settings");
		lblSettings.setBackground(new Color(128, 0, 128));
		lblSettings.setOpaque(true);
		lblSettings.setForeground(new Color(255, 255, 255));
		lblSettings.setFont(new Font("URW Gothic L", Font.BOLD, 24));
		lblSettings.setHorizontalAlignment(SwingConstants.CENTER);
		lblSettings.setBounds((width_small / 2) - 83, 128, 160, 30);
		settings.getContentPane().add(lblSettings);
		JScrollPane scrollSettings = new JScrollPane();
		scrollSettings.setBounds(40, 180, width_small - 80, height_small - 300);

		JPanel panelSettings = new JPanel();

		panelSettings.setLayout(null);
		panelSettings.setAutoscrolls(true);
		int y = 10;
		int settings_height = 210 + 30 * (setting_keys.size() - 8);
		panelSettings.setPreferredSize(new Dimension(width_small - 80, settings_height));
		JScrollPane scrollFrame = new JScrollPane(panelSettings);
		panelSettings.setAutoscrolls(true);
		scrollFrame.setPreferredSize(new Dimension(320, 200));
		scrollFrame.setBounds(40, 180, width_small - 80, height_small - 300);
		// scrollSettings.setViewportView(scrollFrame);
		settings.getContentPane().add(scrollFrame);
		for (int i = 0; i < setting_keys.size(); i++) {
			final JCheckBox chckbxSampleSetting = new JCheckBox(setting_keys.get(i));
			final int s = i;
			chckbxSampleSetting.setName(Integer.toString(i));
			chckbxSampleSetting.setBounds(81, y, 150, 23);
			chckbxSampleSetting.setSelected(list_settings.get(setting_keys.get(i)));
			chckbxSampleSetting.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					list_settings.remove(setting_keys.get(s));
					list_settings.put(setting_keys.get(s), chckbxSampleSetting.isSelected());
				}
			});
			y = y + 25;
			panelSettings.add(chckbxSampleSetting);
		}
		JButton btnSave = new JButton("Save");
		btnSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				settings.setVisible(false);
				settings.dispose();
				if (issues == null) {
					dashboard();
				} else if (!issues.isVisible()) {
					issues.setVisible(true);
				}
			}
		});
		y = y + 10;
		btnSave.setBounds((width_small / 2) - 60, height_small - 100, 100, 25);
		settings.getContentPane().add(btnSave);
		final Label internetCheck = new Label("  ONLINE");
		internetCheck.setFont(new Font("Dialog", Font.BOLD | Font.ITALIC, 12));
		internetCheck.setBackground(Color.GREEN);
		internetCheck.setAlignment(1);
		internetCheck.setForeground(new Color(255, 255, 255));
		internetCheck.setBounds(width_small - 85, 70, 65, 22);
		settings.getContentPane().add(internetCheck);

		Panel panel = new Panel();
		panel.setBackground(new Color(128, 0, 128));
		panel.setBounds(0, 120, width_small, 40);
		settings.getContentPane().add(panel);

		Panel panel_1 = new Panel();
		panel_1.setBackground(new Color(102, 0, 102));
		panel_1.setBounds(0, 160, width_small, 5);
		settings.getContentPane().add(panel_1);

		Panel panel_2 = new Panel();
		panel_2.setBackground(new Color(204, 51, 51));
		panel_2.setBounds(0, 54, width_small, 5);
		settings.getContentPane().add(panel_2);

		ActionListener taskPerformer1 = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				try {
					Socket sock = new Socket();
					InetSocketAddress addr = new InetSocketAddress("www.google.com", 80);
					sock.setSoTimeout(500);
					sock.connect(addr, 3000);

					internetCheck.setBackground(Color.GREEN);
					internetCheck.setText("ONLINE");
					btnSync1.setEnabled(true);
					sock.close();

				} catch (Exception e) {
					internetCheck.setBackground(Color.RED);
					internetCheck.setText("OFFLINE");
					btnSync1.setEnabled(false);
				}
			}
		};

		new Timer(delay, taskPerformer1).start();
		settings.setVisible(true);// making the frame visible
	}

	public void api(final boolean edit) {
		int width_small = 0;
		int height_small = 0;
		if (height >= 480 && width >= 640) {
			width_small = (int) (900 - (900 * (37.5 / 100)));
		} else {
			width_small = (int) (640 - (640 * (37.5 / 100)));
		}

		height_small = (int) (480 - (480 * (5 / 100)));
		api = new JFrame();
		api.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		api.getContentPane().setBackground(new Color(128, 128, 128));
		api.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				// database_save();
			}
		});
		api.setSize(width_small, height_small);// 400 width and 500 height
		api.getContentPane().setLayout(null);// using no layout managers
		JLabel lblNewLabel = new JLabel("TORU");
		lblNewLabel.setForeground(new Color(255, 250, 250));
		lblNewLabel.setBackground(new Color(230, 230, 250));
		lblNewLabel.setFont(new Font("Trattatello", Font.BOLD, 24));
		lblNewLabel.setToolTipText("Welcome\n");

		lblNewLabel.setBounds((width_small / 2) - 34, 15, 70, 25);
		api.getContentPane().add(lblNewLabel);
		api_url = new JTextField();
		api_url.setBounds( 100, 218, width_small - 200, 26);
		api_url.setText(source_api);
		api.getContentPane().add(api_url);
		api_url.setColumns(10);

		JLabel lblApi = new JLabel("API URL");
		lblApi.setForeground(new Color(245, 255, 250));
		lblApi.setHorizontalAlignment(SwingConstants.CENTER);
		lblApi.setBounds(74, 200, width_small - 151, 16);
		api.getContentPane().add(lblApi);
		JPanel title_background = new JPanel();
		title_background.setBackground(new Color(0, 0, 0));
		title_background.setBounds(-17, 0, width_small + 33, 54);
		api.getContentPane().add(title_background);

		access_key = new JTextField();
		access_key.setColumns(10);
		access_key.setText(source_access_key);
		access_key.setBounds(100, 270, width_small - 200, 26);
		api.getContentPane().add(access_key);
		JLabel lblAccessKey = new JLabel("Access Key");
		lblAccessKey.setHorizontalAlignment(SwingConstants.CENTER);
		lblAccessKey.setForeground(new Color(245, 255, 250));
		lblAccessKey.setBounds(80, 250, width_small - 161, 16);
		api.getContentPane().add(lblAccessKey);

		JButton btnSubmit = new JButton("Submit");
		if (edit) {
			btnSubmit.setText("Save");
		}
		Action actionSubmit = new AbstractAction() {
			@Override
			public void actionPerformed(ActionEvent e) {
				String url = api_url.getText();
				String key = access_key.getText();
				if (key.compareTo("enter") == 0 && url.compareTo("api") == 0) {
					api.setVisible(false);
					source_api = url;
					source_access_key = key;
					database_save();
					if (!edit) {
						dashboard();
					}
				} else {
					JOptionPane.showMessageDialog(null, "Wrong access key or API url");
				}
			}
		};
		access_key.addActionListener(actionSubmit);
		api_url.addActionListener(actionSubmit);
		btnSubmit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String url = api_url.getText();
				String key = access_key.getText();
				if (key.compareTo("enter") == 0 && url.compareTo("api") == 0) {
					api.setVisible(false);
					dashboard();
					source_api = url;
					source_access_key = key;

				} else {
					JOptionPane.showMessageDialog(null, "Wrong access key or API url");
				}

			}
		});
		if (height_small - 150 > 300) {
			btnSubmit.setBounds(((width_small / 3) * 2) / 2, height_small - 150, width_small / 3, 29);
		} else {
			btnSubmit.setBounds(((width_small / 3) * 2) / 2, 310, width_small / 3, 29);
		}

		api.getContentPane().add(btnSubmit);

		final JButton btnSync1 = new JButton("Sync");
		btnSync1.setBounds(width_small - 150, 68, 70, 24);
		api.getContentPane().add(btnSync1);

		JLabel lblApiInformation = new JLabel("API Information");
		lblApiInformation.setBackground(new Color(51, 102, 204));
		lblApiInformation.setHorizontalAlignment(SwingConstants.CENTER);
		lblApiInformation.setForeground(new Color(255, 255, 255));
		lblApiInformation.setFont(new Font("Dialog", Font.BOLD, 20));
		lblApiInformation.setBounds((width_small / 2) - 145, 108, 309, 40);
		lblApiInformation.setOpaque(true);
		api.getContentPane().add(lblApiInformation);
		final Label internetCheck = new Label("  ONLINE");
		internetCheck.setFont(new Font("Dialog", Font.BOLD | Font.ITALIC, 12));
		internetCheck.setBackground(Color.GREEN);
		internetCheck.setBounds(width_small - 80, 70, 65, 22);
		internetCheck.setForeground(new Color(255, 255, 255));
		internetCheck.setAlignment(1);
		api.getContentPane().add(internetCheck);

		Panel panel = new Panel();
		panel.setBackground(new Color(204, 51, 51));
		panel.setBounds(0, 54, width_small, 5);
		api.getContentPane().add(panel);

		ActionListener taskPerformer1 = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				try {
					Socket sock = new Socket();
					InetSocketAddress addr = new InetSocketAddress("www.google.com", 80);
					sock.setSoTimeout(500);
					sock.connect(addr, 3000);

					internetCheck.setBackground(Color.GREEN);
					internetCheck.setText("ONLINE");
					btnSync1.setEnabled(true);
					sock.close();

				} catch (Exception e) {
					internetCheck.setBackground(Color.RED);
					internetCheck.setText("OFFLINE");
					btnSync1.setEnabled(false);
				}
			}
		};
		new Timer(delay, taskPerformer1).start();
		api.setVisible(true);// making the frame visible

		Panel panel_2 = new Panel();
		panel_2.setBackground(new Color(51, 51, 204));
		panel_2.setBounds(0, 150, width_small, 5);
		api.getContentPane().add(panel_2);
		Panel panel_1 = new Panel();
		panel_1.setBackground(new Color(51, 102, 204));
		panel_1.setBounds(0, 105, width_small, 45);
		api.getContentPane().add(panel_1);
	}

	public void dashboard() {
		Date date = new Date(11,1, 2015);
		Issue issue = new Issue(1,"title",1,1,2015,"title",1,2015,date);
		Issue Table [title, volume, number, year, show_title, show_volume, show_number, show_year, date_published]
		issues = new JFrame();
		issues.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		if (height >= 480 && width >= 640) {
			issues.setSize(width, height);
		} else {
			width = 640;
			height = 480;
			issues.setSize(640, 480);
		}

		issues.getContentPane().setBackground(new Color(105, 105, 105));
		issues.setVisible(true);
		issues.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				// database_save();
			}
		});
		Object rowData[][] = { { "Row1-Column1", "Row1-Column2", "Row1-Column3", "View", "Delete" },
				{ "Row2-Column1", "Row2-Column2", "Row2-Column3", "View", "Delete" },
				{ "Row3-Column1", "Row3-Column2", "Row3-Column3", "View", "Delete" },
				{ "Row4-Column1", "Row4-Column2", "Row4-Column3", "View", "Delete" } };
		Object columnNames[] = { "Date", "Issue ID", "Name", "", "" };
		issues.getContentPane().setLayout(null);

		final JButton btnSync = new JButton("Sync");
		btnSync.setBounds(width - 155, 21, 70, 24);
		issues.getContentPane().add(btnSync);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		scrollPane.setBounds(30, 140, width - 60, height - 285);
		issues.getContentPane().add(scrollPane);

		DefaultTableModel dtm = new DefaultTableModel(rowData, columnNames);

		issues_table = new JTable(dtm);
		scrollPane.setViewportView(issues_table);
		issues_table.setColumnSelectionAllowed(true);
		issues_table.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
		issues_table.setCellSelectionEnabled(true);
		issues_table.setRowHeight(23);
		issues_table.setAutoCreateRowSorter(true);

		final Label internetCheck = new Label("ONLINE");
		internetCheck.setFont(new Font("Dialog", Font.BOLD | Font.ITALIC, 12));
		internetCheck.setBackground(Color.GREEN);
		internetCheck.setBounds(width - 85, 22, 65, 22);
		internetCheck.setForeground(new Color(255, 255, 255));
		internetCheck.setAlignment(1);
		issues.getContentPane().add(internetCheck);

		ActionListener taskPerformer1 = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				try {
					Socket sock = new Socket();
					InetSocketAddress addr = new InetSocketAddress("www.google.com", 80);
					sock.setSoTimeout(500);
					sock.connect(addr, 3000);

					internetCheck.setBackground(Color.GREEN);
					internetCheck.setText("ONLINE");
					btnSync.setEnabled(true);
					sock.close();

				} catch (Exception e) {
					internetCheck.setBackground(Color.RED);
					internetCheck.setText("OFFLINE");
					btnSync.setEnabled(false);
				}
			}
		};
		new Timer(delay, taskPerformer1).start();
		DefaultTableModel model = new DefaultTableModel(rowData, columnNames);
		Action delete = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				JTable table = (JTable) e.getSource();
				int modelRow = Integer.valueOf(e.getActionCommand());
				// JOptionPane.showMessageDialog(null, "Deleted");
				int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this issue?",
						"Delete ?", JOptionPane.YES_NO_OPTION);
				if (reply == JOptionPane.YES_OPTION) {

					((DefaultTableModel) table.getModel()).removeRow(modelRow);
					table.repaint();
				}

				// / ((DefaultTableModel)table.getModel()).removeRow(modelRow);
			}
		};
		Action view = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				JTable table = (JTable) e.getSource();
				int modelRow = Integer.valueOf(e.getActionCommand());
				issue(modelRow);
				// / ((DefaultTableModel)table.getModel()).removeRow(modelRow);
			}
		};

		ButtonColumn buttonColumn = new ButtonColumn(issues_table, view, 3);
		ButtonColumn buttonColumn2 = new ButtonColumn(issues_table, delete, 4);

		JLabel lblIssues = new JLabel("Issues");
		lblIssues.setBackground(new Color(220, 20, 60));
		lblIssues.setOpaque(true);
		lblIssues.setFont(new Font("Dialog", Font.BOLD, 28));
		lblIssues.setForeground(new Color(240, 255, 255));
		lblIssues.setBounds(40, 60, 120, 30);
		issues.getContentPane().add(lblIssues);

		JButton btnSettings = new JButton("Settings");
		btnSettings.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				settings();
			}
		});
		btnSettings.setBounds(15, 20, 117, 29);
		issues.getContentPane().add(btnSettings);

		JButton btnApi = new JButton("API");
		btnApi.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				api(true);
			}
		});
		btnApi.setBounds(130, 20, 90, 29);
		issues.getContentPane().add(btnApi);
		ImageIcon db_icon = new ImageIcon("src/lib/db_xxs.png");
		JButton btnSaveData = new JButton(db_icon);
		btnSaveData.setFont(new Font("Dialog", Font.BOLD, 24));
		btnSaveData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				database_save();
			}
		});
		btnSaveData.setBounds(26, height - 115, 70, 40);
		issues.getContentPane().add(btnSaveData);

		JLabel lblUpdateDb = new JLabel("Update");
		lblUpdateDb.setForeground(Color.WHITE);
		lblUpdateDb.setHorizontalAlignment(SwingConstants.CENTER);
		lblUpdateDb.setBounds(26, height - 130, 70, 15);
		issues.getContentPane().add(lblUpdateDb);

		Panel footer_border = new Panel();
		footer_border.setBackground(new Color(220, 20, 60));
		footer_border.setBounds(0, height - 74, width, 10);
		issues.getContentPane().add(footer_border);

		Panel panel_1 = new Panel();
		panel_1.setBackground(new Color(128, 0, 0));
		panel_1.setBounds(0, 95, width, 5);
		issues.getContentPane().add(panel_1);

		Panel footer = new Panel();
		footer.setBackground(new Color(178, 34, 34));
		footer.setBounds(0, height - 74, width, 120);
		issues.getContentPane().add(footer);

		Panel panel = new Panel();
		panel.setBackground(new Color(220, 20, 60));
		panel.setBounds(0, 55, width, 40);
		issues.getContentPane().add(panel);

		JButton btnAdd = new JButton("Add");
		btnAdd.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				// JOptionPane.showMessageDialog(null, "Deleted");

				Object[] new_row = { "Row3-Column1", "Row3-Column2", "Row3-Column3", "View", "Delete" };

				((DefaultTableModel) issues_table.getModel()).addRow(new_row);
				issues_table.repaint();
			}
		});
		btnAdd.setBounds(width - 150, 109, 117, 25);
		issues.getContentPane().add(btnAdd);
		buttonColumn.setMnemonic(KeyEvent.VK_D);
	}

	public void issue(final int issue_id) {

		articles = new JFrame();
		articles.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		if (height >= 480 && width >= 640) {
			articles.setSize(width, height);
		} else {
			width = 640;
			height = 480;
			articles.setSize(640, 480);
		}

		articles.getContentPane().setBackground(new Color(128, 128, 128));
		articles.setVisible(true);
		articles.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				// database_save();
			}
		});
		Object rowData[][] = { { "Row1-Column1", "Row1-Column2", "View", "Delete" },
				{ "Row2-Column1", "Row2-Column2", "View", "Delete" },
				{ "Row3-Column1", "Row3-Column2", "View", "Delete" },
				{ "Row4-Column1", "Row4-Column2", "View", "Delete" } };
		Object columnNames[] = { "Tile", "Description", "", "" };
		articles.getContentPane().setLayout(null);

		final JButton btnSync = new JButton("Sync");
		btnSync.setBounds(width - 155, 21, 70, 24);
		articles.getContentPane().add(btnSync);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
		scrollPane.setBounds(30, 140, width - 60, height - 285);
		articles.getContentPane().add(scrollPane);

		DefaultTableModel dtm = new DefaultTableModel(rowData, columnNames);

		final JTable table = new JTable(dtm);
		table.setAutoCreateRowSorter(true);
		scrollPane.setViewportView(table);
		table.setColumnSelectionAllowed(true);
		table.setBorder(new BevelBorder(BevelBorder.RAISED, null, null, null, null));
		table.setCellSelectionEnabled(true);
		table.setRowHeight(23);
		final Label internetCheck = new Label("  ONLINE");
		internetCheck.setFont(new Font("Dialog", Font.BOLD | Font.ITALIC, 12));
		internetCheck.setBackground(Color.GREEN);
		internetCheck.setAlignment(1);
		internetCheck.setForeground(new Color(255, 255, 255));
		internetCheck.setBounds(width - 85, 22, 65, 22);
		articles.getContentPane().add(internetCheck);

		ActionListener taskPerformer1 = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				try {
					Socket sock = new Socket();
					InetSocketAddress addr = new InetSocketAddress("www.google.com", 80);
					sock.setSoTimeout(500);
					sock.connect(addr, 3000);

					internetCheck.setBackground(Color.GREEN);
					internetCheck.setText("ONLINE");
					btnSync.setEnabled(true);
					sock.close();

				} catch (Exception e) {
					internetCheck.setBackground(Color.RED);
					internetCheck.setText("OFFLINE");
					btnSync.setEnabled(false);
				}
			}
		};
		new Timer(delay, taskPerformer1).start();
		DefaultTableModel model = new DefaultTableModel(rowData, columnNames);
		Action delete = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				JTable table = (JTable) e.getSource();
				int modelRow = Integer.valueOf(e.getActionCommand());
				// JOptionPane.showMessageDialog(null, "Deleted");
				int reply = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this article?",
						"Delete ?", JOptionPane.YES_NO_OPTION);
				if (reply == JOptionPane.YES_OPTION) {

					((DefaultTableModel) table.getModel()).removeRow(modelRow);
					table.repaint();
				}

				// / ((DefaultTableModel)table.getModel()).removeRow(modelRow);
			}
		};
		Action view = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				JTable table = (JTable) e.getSource();
				int modelRow = Integer.valueOf(e.getActionCommand());
				article(issue_id, modelRow);
				// / ((DefaultTableModel)table.getModel()).removeRow(modelRow);
			}
		};

		ButtonColumn buttonColumn = new ButtonColumn(table, view, 2);
		ButtonColumn buttonColumn2 = new ButtonColumn(table, delete, 3);

		JLabel lblArticles = new JLabel("Articles");
		lblArticles.setBackground(new Color(0, 139, 139));
		lblArticles.setFont(new Font("Dialog", Font.BOLD, 28));
		lblArticles.setForeground(new Color(240, 255, 255));
		lblArticles.setBounds(188, 60, 180, 30);
		lblArticles.setOpaque(true);
		articles.getContentPane().add(lblArticles);

		JLabel lblIssue = new JLabel("Issue:");
		lblIssue.setBackground(new Color(0, 139, 139));
		lblIssue.setForeground(new Color(240, 255, 255));
		lblIssue.setFont(new Font("Dialog", Font.BOLD, 28));
		lblIssue.setBounds(40, 60, 94, 30);
		lblIssue.setOpaque(true);
		articles.getContentPane().add(lblIssue);

		JLabel lblIssueId = new JLabel("");
		lblIssueId.setBackground(new Color(0, 139, 139));
		lblIssueId.setForeground(new Color(240, 255, 255));
		lblIssueId.setFont(new Font("Dialog", Font.BOLD, 28));
		lblIssueId.setBounds(136, 60, 50, 30);
		lblIssueId.setText(Integer.toString(issue_id));
		lblIssueId.setOpaque(true);
		articles.getContentPane().add(lblIssueId);

		JButton btnGoBack = new JButton("Go back");
		btnGoBack.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				articles.setVisible(false);
				if (issues == null) {
					articles.dispose();
					dashboard();
				} else if (!issues.isVisible()) {
					articles.dispose();
					issues.setVisible(true);
				} else {
					articles.dispose();
				}
			}
		});
		btnGoBack.setBounds(15, 20, 117, 29);
		articles.getContentPane().add(btnGoBack);
		buttonColumn.setMnemonic(KeyEvent.VK_D);
		buttonColumn2.setMnemonic(KeyEvent.VK_D);
		ImageIcon db_icon = new ImageIcon("src/lib/db_xxs.png");
		JButton btnSaveData = new JButton(db_icon);
		btnSaveData.setFont(new Font("Dialog", Font.BOLD, 24));
		btnSaveData.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				database_save();
			}
		});
		btnSaveData.setBounds(26, height - 115, 70, 40);
		articles.getContentPane().add(btnSaveData);
		JLabel lblUpdateDb = new JLabel("Update");
		lblUpdateDb.setForeground(Color.WHITE);
		lblUpdateDb.setHorizontalAlignment(SwingConstants.CENTER);
		lblUpdateDb.setBounds(26, height - 130, 70, 15);
		articles.getContentPane().add(lblUpdateDb);
		Panel footer_border = new Panel();
		footer_border.setBackground(new Color(0, 139, 139));
		footer_border.setBounds(0, height - 74, width, 10);
		articles.getContentPane().add(footer_border);

		Panel footer = new Panel();
		footer.setBackground(new Color(0, 128, 128));
		footer.setBounds(0, height - 74, width, 120);
		articles.getContentPane().add(footer);

		Panel panel = new Panel();
		panel.setBackground(new Color(0, 139, 139));
		panel.setBounds(0, 55, width, 40);
		articles.getContentPane().add(panel);

		Panel panel_1 = new Panel();
		panel_1.setBackground(new Color(47, 79, 79));
		panel_1.setBounds(0, 95, width, 5);
		articles.getContentPane().add(panel_1);
		JButton btnAdd = new JButton("Add");
		btnAdd.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Object[] new_row = { "Row1-Column6", "Row1-Column2", "View", "Delete" };

				((DefaultTableModel) table.getModel()).addRow(new_row);
				table.repaint();
			}
		});
		btnAdd.setBounds(width - 150, 109, 117, 25);
		articles.getContentPane().add(btnAdd);
	}

	public void article(final int issue_id, int article_id) {
		int width_small = 0;
		int height_small = 0;
		if (height >= 480 && width >= 640) {
			width_small = (int) (width - (width * (37.5 / 100)));
			height_small = (int) (height - (height * (5 / 100)));
		} else {
			width_small = (int) (640 - (640 * (37.5 / 100)));
			height_small = (int) (480 - (480 * (5 / 100)));
		}
		final JFrame article = new JFrame();
		article.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		article.setSize(width_small, height_small);
		article.getContentPane().setBackground(new Color(128, 128, 128));
		article.setVisible(true);
		article.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				// database_save();
			}
		});
		Object rowData[][] = { { "Row1-Column1", "Row1-Column2", "View", "Delete" },
				{ "Row2-Column1", "Row2-Column2", "View", "Delete" },
				{ "Row3-Column1", "Row3-Column2", "View", "Delete" },
				{ "Row4-Column1", "Row4-Column2", "View", "Delete" } };
		Object columnNames[] = { "Column One", "Column Two", "", "" };
		article.getContentPane().setLayout(null);

		JLabel lblArticleDetails = new JLabel("Article Details");
		lblArticleDetails.setHorizontalAlignment(SwingConstants.CENTER);
		lblArticleDetails.setFont(new Font("Dialog", Font.BOLD, 20));
		lblArticleDetails.setForeground(new Color(255, 255, 255));
		lblArticleDetails.setBackground(new Color(204, 153, 102));
		lblArticleDetails.setBounds(width_small / 4, 65, width_small / 2, 40);
		lblArticleDetails.setOpaque(true);
		article.getContentPane().add(lblArticleDetails);

		final JButton btnSync = new JButton("Sync");
		btnSync.setBounds(width_small - 150, 21, 70, 24);
		article.getContentPane().add(btnSync);

		final Label internetCheck = new Label("  ONLINE");
		internetCheck.setFont(new Font("Dialog", Font.BOLD | Font.ITALIC, 12));
		internetCheck.setBackground(Color.GREEN);
		internetCheck.setAlignment(1);
		internetCheck.setForeground(new Color(255, 255, 255));
		internetCheck.setBounds(width_small - 80, 22, 65, 22);
		article.getContentPane().add(internetCheck);

		ActionListener taskPerformer1 = new ActionListener() {
			public void actionPerformed(ActionEvent evt) {
				try {
					Socket sock = new Socket();
					InetSocketAddress addr = new InetSocketAddress("www.google.com", 80);
					sock.setSoTimeout(500);
					sock.connect(addr, 3000);

					internetCheck.setBackground(Color.GREEN);
					internetCheck.setText("ONLINE");
					btnSync.setEnabled(true);
					sock.close();

				} catch (Exception e) {
					internetCheck.setBackground(Color.RED);
					internetCheck.setText("OFFLINE");
					btnSync.setEnabled(false);
				}
			}
		};
		new Timer(delay, taskPerformer1).start();
		DefaultTableModel model = new DefaultTableModel(rowData, columnNames);
		Action delete = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				JTable table = (JTable) e.getSource();
				int modelRow = Integer.valueOf(e.getActionCommand());
				JOptionPane.showMessageDialog(null, "Deleted");
				// / ((DefaultTableModel)table.getModel()).removeRow(modelRow);
			}
		};
		Action view = new AbstractAction() {
			public void actionPerformed(ActionEvent e) {
				JTable table = (JTable) e.getSource();
				int modelRow = Integer.valueOf(e.getActionCommand());
				JOptionPane.showMessageDialog(null, modelRow);
				// / ((DefaultTableModel)table.getModel()).removeRow(modelRow);
			}
		};

		JButton btnGoBack = new JButton("Close");
		btnGoBack.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				article.setVisible(false);
				if (articles == null) {
					article.dispose();
					issue(issue_id);
				} else if (!articles.isVisible()) {
					article.dispose();
					articles.setVisible(true);
				} else {
					article.dispose();
				}
			}
		});
		btnGoBack.setBounds(6, 17, 117, 30);
		article.getContentPane().add(btnGoBack);
		JScrollPane scrollSettings = new JScrollPane();
		scrollSettings.setBounds(40, 180, 320, 200);

		JPanel panel = new JPanel();
		panel.setBounds(50, 107, 300, 307);
		article.getContentPane().add(panel);
		panel.setLayout(null);
		panel.setAutoscrolls(true);
		int y = 10;
		int fields = 5;
		int settings_height = 210 + 30 * (fields - 8);

		Panel panel_1 = new Panel();
		panel_1.setBackground(new Color(204, 153, 102));
		panel_1.setBounds(0, 65, width_small, 45);
		article.getContentPane().add(panel_1);

		Panel panel_2 = new Panel();
		panel_2.setBackground(new Color(153, 102, 51));
		panel_2.setBounds(0, 110, width_small, 5);
		article.getContentPane().add(panel_2);
		panel.setPreferredSize(new Dimension(320, settings_height));
		JScrollPane scrollFrame = new JScrollPane(panel);
		panel.setAutoscrolls(true);
		scrollFrame.setPreferredSize(new Dimension(320, 200));
		scrollFrame.setBounds(40, 132, width_small - 80, height_small - 280);
		// scrollSettings.setViewportView(scrollFrame);
		article.getContentPane().add(scrollFrame);
		JLabel lblIssues = new JLabel("Article id:");
		lblIssues.setBounds(24, 18, 110, 30);
		panel.add(lblIssues);
		lblIssues.setFont(new Font("Dialog", Font.BOLD, 18));
		lblIssues.setForeground(Color.BLACK);

		JLabel lblIssue = new JLabel("Issue id:");
		lblIssue.setBounds(24, 48, 94, 30);
		panel.add(lblIssue);
		lblIssue.setForeground(Color.BLACK);
		lblIssue.setFont(new Font("Dialog", Font.BOLD, 18));

		JLabel lblIssueId = new JLabel("");
		lblIssueId.setBounds(130, 48, 94, 30);
		panel.add(lblIssueId);
		lblIssueId.setForeground(Color.BLACK);
		lblIssueId.setFont(new Font("Dialog", Font.BOLD, 16));
		lblIssueId.setText(Integer.toString(issue_id));

		JLabel lblArticleId = new JLabel("1");
		lblArticleId.setBounds(130, 18, 94, 30);
		panel.add(lblArticleId);
		lblArticleId.setForeground(Color.BLACK);
		lblArticleId.setFont(new Font("Dialog", Font.BOLD, 16));
		lblArticleId.setText(Integer.toString(article_id));
	}

	public Main() {
		try {
			for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (UnsupportedLookAndFeelException e) {
			// handle exception
		} catch (ClassNotFoundException e) {
			// handle exception
		} catch (InstantiationException e) {
			// handle exception
		} catch (IllegalAccessException e) {
			// handle exception
		}
		login();
	}

	public static void main(String[] args) {

		database_setup();
		populate_variables();
		new Main();
	}
}